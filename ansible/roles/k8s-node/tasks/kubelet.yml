---
- name: Download runc binary
  ansible.builtin.get_url:
    url: "{{ k8s_node_runc_url }}"
    dest: "/usr/local/bin/{{ k8s_node_runc_file }}"
    mode: u=rx,g=rx,o=r

- name: Download cri tools
  ansible.builtin.get_url:
      url: "{{ k8s_node_cri_tools_url }}"
      dest: "/tmp/{{ k8s_node_cri_tools_file }}"
  
- name: Extract cri tools
  unarchive:
      src: "/tmp/{{ k8s_node_cri_tools_file }}"
      remote_src: yes
      dest: /usr/local/bin
      extra_opts: [--strip-components=1]
      mode: u=rx,g=rx,o=r
      owner: root
      group: root

- name: Download kubelet binaries
  ansible.builtin.get_url:
    url: "https://storage.googleapis.com/kubernetes-release/release/v{{ k8s_version }}/bin/linux/amd64/kubelet"
    dest: "/usr/local/bin/kubelet"
    mode: u=rwx,g=rx

- name: Create kubelet directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: u=rwx,g=rx,o=rx
    owner: root
    group: root
  loop:
    - /etc/kubernetes/manifests
    - /var/lib/kubelet

- name: Copy kubelet.kubeconfig
  ansible.builtin.copy: 
    src: "{{ k8s_conf_files_dir }}/{{ inventory_hostname_short }}.kubeconfig"
    dest: /var/lib/kubelet/kubeconfig
  notify:
  - Restart kubelet service

- name: Create kubelet config
  ansible.builtin.template:
    src: kubelet-config.yaml.j2
    dest: /var/lib/kubelet/kubelet-config.yaml
  notify:
  - Restart kubelet service

- name: Create kubelet unit file
  ansible.builtin.template:
    src: kubelet.service.j2
    dest: /etc/systemd/system/kubelet.service
  notify:
  - Reload systemd units
  - Restart kubelet service

- name: Enable and start kubelet service
  systemd:
    name: kubelet
    enabled: yes
    state: started